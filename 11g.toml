[[metric]]
context = "sql"
labels = [ "username", "sql_id", "command", "child" ]
metricsdesc = { cpu_time_total = "Generic counter metric of tablespaces bytes in Oracle." }
metricstype = { cpu_time_total = "counter" }
request = '''
SELECT sql_id,
  child_number child,
  (SELECT command_name FROM v$sqlcommand WHERE s.command_type = command_type) command,
  parsing_schema_name username,
  cpu_time cpu_time_total,
    elapsed_time elapsed_time_total,
    buffer_gets buffer_gets_total,
    disk_reads disk_read_total,
    sorts sort_total,
    executions executions_total,
    physical_read_bytes phy_read_bytes_total,
    physical_read_requests phy_read_request_total,
    physical_write_bytes phy_write_bytes_total,
    physical_write_requests phy_write_request_total,
    parse_calls parse_call_total,
    application_wait_time application_wait_total,
    concurrency_wait_time concurrency_wait_total,
    cluster_wait_time cluster_wait_total,
    user_io_wait_time user_io_wait_total,
    plsql_exec_time plsql_exec_total,
    java_exec_time java_exec_total,
    rows_processed rows_processed_total
FROM v$sql s
WHERE last_active_time >= TRUNC(sysdate, 'MI') - 1 / 24 / 60 AND is_obsolete ='N'
'''

[[metric]]
context = "sysevent"
labels = [ "event", "class"]
metricsdesc = { waits_total = "Generic counter metric of tablespaces bytes in Oracle." }
metricstype = { waits_total = "counter" }
request = '''
SELECT n.wait_class class,
    e.event,
    e.total_waits waits_total
FROM v$system_event e, v$event_name n
WHERE n.name = e.event
'''

[[metric]]
context = "segment"
labels = [ "name"]
metricsdesc = { value = "Generic counter metric of tablespaces bytes in Oracle." }
metricstype = { value = "counter" }
request = "SELECT stat_name name, value FROM v$sys_time_model"

[[metric]]
context = "sysevent"
labels = [ "owner", "name", "type", "tablespace" ]
metricsdesc = { bytes = "Generic counter metric of tablespaces bytes in Oracle." }
request = '''
SELECT owner, segment_name name, segment_type type, tablespace_name tablespace, sum(bytes) bytes
  FROM dba_segments
 WHERE tablespace_name NOT IN ('SYSTEM','SYSAUX') AND tablespace_name NOT LIKE 'UNDOTBS%'
 GROUP BY owner, segment_name, segment_type, tablespace_name
'''

[[metric]]
context = "log"
metricsdesc = { sequence = "Generic counter metric of tablespaces bytes in Oracle." }
metricstype = { sequence = "counter" }
request = "SELECT sequence# sequence FROM v$log WHERE thread# = (SELECT instance_number FROM v$instance) AND status = 'CURRENT'"

[[metric]]
context = "ash"
labels = [ "sample_id", "sid", "serial", "event", "type", "username", "sql_id", "opname", "program", "machine", "blocking" ]
metricsdesc = { sample = "Generic counter metric of tablespaces bytes in Oracle." }
request = '''
SELECT sample_id,
       session_id sid,
       session_serial# serial,
       DECODE(session_state, 'ON CPU', 'Wait for CPU', 'WAITING', event) event,
       session_type type,
       (SELECT username FROM dba_users WHERE user_id = ash.user_id) username,
       NVL(sql_id, 'null') sql_id,
       NVL(sql_opname, 'null') opname,
       NVL(program, 'null') program,
	   NVL(machine, 'null') machine,
	   TO_CHAR(NVL(blocking_session, 0)) blocking,
       1 sample
  FROM v$active_session_history ash
 WHERE sample_time >= TRUNC(sysdate, 'MI') - 1 / 24 / 60 AND sample_time < TRUNC(sysdate, 'MI')
'''

[[metric]]
context = "lag"
labels = [ "dgtype", "name" ]
metricsdesc = { sample = "Generic counter metric of tablespaces bytes in Oracle." }
request = '''
SELECT 'physical' dgtype, name,
       EXTRACT(DAY FROM itval) * 24 * 60 * 60 +
	   EXTRACT(HOUR FROM itval) * 60 * 60 + 
	   EXTRACT(MINUTE FROM itval) * 60 +
       EXTRACT(SECOND FROM itval) second
  FROM (SELECT ds.name, TO_DSINTERVAL(value) itval
          FROM v$dataguard_stats ds, v$database d
         WHERE d.database_role = 'PHYSICAL STANDBY'
           AND ds.name IN ('apply lag', 'transport lag'))
UNION ALL
SELECT 'logical' dgtype, 'apply lag' name, (SYSDATE - lp.applied_time) * 24 * 60 * 60 second
  FROM v$logstdby_progress lp, v$database d
 WHERE d.database_role = 'LOGICAL STANDBY'
'''
ignorezeroresult = true
